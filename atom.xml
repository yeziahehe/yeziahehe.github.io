<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ivan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yeziahehe.com/"/>
  <updated>2020-03-02T14:16:13.341Z</updated>
  <id>http://yeziahehe.com/</id>
  
  <author>
    <name>叶帆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Reshape the Matrix</title>
    <link href="http://yeziahehe.com/2020/03/02/ReshapeTheMatrix/"/>
    <id>http://yeziahehe.com/2020/03/02/ReshapeTheMatrix/</id>
    <published>2020-03-02T14:10:17.000Z</published>
    <updated>2020-03-02T14:16:13.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/iShot2020-03-02下午10.13.52.png" alt></p><p><a href="https://leetcode.com/problems/reshape-the-matrix/" target="_blank" rel="noopener">LeetCode 566. Reshape the Matrix</a>。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>思路很简单，二维数组间的转换 ans[i/c][i%c] = nums[i/col][i%col]</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">matrixReshape</span><span class="params">(<span class="number">_</span> nums: [[Int]], <span class="number">_</span> r: Int, <span class="number">_</span> <span class="built_in">c</span>: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">if</span> nums.<span class="built_in">count</span> * nums[<span class="number">0</span>].<span class="built_in">count</span> != r * <span class="built_in">c</span> &#123;</span><br><span class="line">            <span class="comment">// 不可以转换</span></span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 可以转换</span></span><br><span class="line">        <span class="keyword">var</span> ans = [[<span class="type">Int</span>]](repeating: [<span class="type">Int</span>](repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="built_in">c</span>), <span class="built_in">count</span>: r)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;r*<span class="built_in">c</span> &#123;</span><br><span class="line">            ans[i/<span class="built_in">c</span>][i%<span class="built_in">c</span>] = nums[i/nums[<span class="number">0</span>].<span class="built_in">count</span>][i%nums[<span class="number">0</span>].<span class="built_in">count</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2020/03/02/ReshapeTheMatrix/">http://yeziahehe.com/2020/03/02/ReshapeTheMatrix/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-1258094708.cos.ap-shanghai.myqcloud.com
      
    
    </summary>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://yeziahehe.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Sum of Left Leaves</title>
    <link href="http://yeziahehe.com/2020/02/28/SumOfLeftLeaves/"/>
    <id>http://yeziahehe.com/2020/02/28/SumOfLeftLeaves/</id>
    <published>2020-02-28T05:39:19.000Z</published>
    <updated>2020-03-01T06:45:19.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/r3mVDi.png" alt></p><p><a href="https://leetcode.com/problems/sum-of-left-leaves/" target="_blank" rel="noopener">LeetCode 404. Sum of Left Leaves</a>。</p><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><p>时间复杂度: O(n), 空间复杂度: O(logn)</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>考虑用递归的思路，存在左子树且左子树的左子树和右子树都为空的情况下就可以返回。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sumOfLeftLeaves</span><span class="params">(<span class="number">_</span> root: TreeNode?)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> root = root <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">left</span> = root.<span class="keyword">left</span>, <span class="keyword">left</span>.<span class="keyword">left</span> == <span class="literal">nil</span>, <span class="keyword">left</span>.<span class="keyword">right</span> == <span class="literal">nil</span> &#123;</span><br><span class="line">            sum += <span class="keyword">left</span>.val</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum + sumOfLeftLeaves(root.<span class="keyword">left</span>) + sumOfLeftLeaves(root.<span class="keyword">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2020/02/28/SumOfLeftLeaves/">http://yeziahehe.com/2020/02/28/SumOfLeftLeaves/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-1258094708.cos.ap-shanghai.myqcloud.com
      
    
    </summary>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yeziahehe.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Assign Cookies</title>
    <link href="http://yeziahehe.com/2020/02/28/AssignCookies/"/>
    <id>http://yeziahehe.com/2020/02/28/AssignCookies/</id>
    <published>2020-02-28T05:39:18.000Z</published>
    <updated>2020-03-01T06:14:47.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/WtnWJe.png" alt></p><p><a href="https://leetcode.com/problems/assign-cookies/" target="_blank" rel="noopener">LeetCode 455. Assign Cookies</a>。</p><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><p>时间复杂度: O(nlogn), 空间复杂度: O(1)</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>贪心算法的思想，分配的最优策略是每次分配只关注未分配饼干的最小胃口的小朋友。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findContentChildren</span><span class="params">(<span class="number">_</span> g: [Int], <span class="number">_</span> s: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> gSort = g.sorted()</span><br><span class="line">        <span class="keyword">let</span> sSort = s.sorted()</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; gSort.<span class="built_in">count</span> &amp;&amp; j &lt; sSort.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> gSort[i] &lt;= sSort[j] &#123;</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2020/02/28/AssignCookies/">http://yeziahehe.com/2020/02/28/AssignCookies/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-1258094708.cos.ap-shanghai.myqcloud.com
      
    
    </summary>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Greedy" scheme="http://yeziahehe.com/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>Hamming Distance</title>
    <link href="http://yeziahehe.com/2020/02/27/HammingDistance/"/>
    <id>http://yeziahehe.com/2020/02/27/HammingDistance/</id>
    <published>2020-02-27T05:39:19.000Z</published>
    <updated>2020-03-01T06:45:24.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/9X1Ydr.png" alt></p><p><a href="https://leetcode.com/problems/hamming-distance/" target="_blank" rel="noopener">LeetCode 461. Hamming Distance</a>。</p><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><p>时间复杂度: O(1), 空间复杂度: O(1)</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>首先想到的思路是肯定是循环按每一位去对比，因为范围是给定的 <code>0 ≤ x, y &lt; 2 31</code>。但是这种时间复杂度肯定是 O(n)，算法如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hammingDistance</span><span class="params">(<span class="number">_</span> x: Int, <span class="number">_</span> y: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> xv = x</span><br><span class="line">        <span class="keyword">var</span> yv = y</span><br><span class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">31</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> bt = xv%<span class="number">2</span></span><br><span class="line">            <span class="keyword">let</span> by = yv%<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> bt == by &#123;</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            xv = xv/<span class="number">2</span></span><br><span class="line">            yv = yv/<span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以考虑用二进制的一些机制来解题。</p><p>二进制的注意事项：</p><ul><li>取余直接得到当前位的值；</li><li>做除法相当于右移一位；</li><li>位运算里面有很多运算，比如这一题可以用异或，用了异或之后部分情况可能或缩短循环次数</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hammingDistance</span><span class="params">(<span class="number">_</span> x: Int, <span class="number">_</span> y: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> t = x^y</span><br><span class="line">        <span class="keyword">while</span> (t&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            ans += t&amp;<span class="number">1</span></span><br><span class="line">            t = t&gt;&gt;<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2020/02/27/HammingDistance/">http://yeziahehe.com/2020/02/27/HammingDistance/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-1258094708.cos.ap-shanghai.myqcloud.com
      
    
    </summary>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Bit Manipulation" scheme="http://yeziahehe.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>Robot Return to Origin</title>
    <link href="http://yeziahehe.com/2020/02/27/RobotReturntoOrigin/"/>
    <id>http://yeziahehe.com/2020/02/27/RobotReturntoOrigin/</id>
    <published>2020-02-27T05:39:18.000Z</published>
    <updated>2020-03-01T06:01:47.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/hffxUA.png" alt></p><p><a href="https://leetcode.com/problems/robot-return-to-origin/" target="_blank" rel="noopener">LeetCode 657. Robot Return to Origin</a>。</p><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><p>时间复杂度: O(n), 空间复杂度: O(1)</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>因为设定每次移动幅度相同，所以用两个变量分别存储水平和垂直方向的值，只要 string 里面 U 和 D 的数量一致，L 和 R 的数量一致即可回到原点。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">judgeCircle</span><span class="params">(<span class="number">_</span> moves: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> v = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> h = <span class="number">0</span></span><br><span class="line">        moves.<span class="built_in">map</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> $<span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"U"</span> : v -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">"D"</span> : v += <span class="number">1</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">"L"</span> : h -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">"R"</span> : h += <span class="number">1</span></span><br><span class="line">                <span class="keyword">default</span>: <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v == <span class="number">0</span> &amp;&amp; h == <span class="number">0</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2020/02/27/RobotReturntoOrigin/">http://yeziahehe.com/2020/02/27/RobotReturntoOrigin/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-1258094708.cos.ap-shanghai.myqcloud.com
      
    
    </summary>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yeziahehe.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>如何让界面保持流畅</title>
    <link href="http://yeziahehe.com/2020/02/05/smooth_user_interfaces_for_ios/"/>
    <id>http://yeziahehe.com/2020/02/05/smooth_user_interfaces_for_ios/</id>
    <published>2020-02-05T07:22:06.000Z</published>
    <updated>2020-03-01T04:56:43.442Z</updated>
    
    <content type="html"><![CDATA[<p>首先建议大家先读一读这篇文章 <a href="https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="noopener">iOS 保持界面流畅的技巧 | Garan no dou</a> ，从原理层面讲的很清楚。</p><h1 id="离屏渲染（offscreen-rendering）"><a href="#离屏渲染（offscreen-rendering）" class="headerlink" title="离屏渲染（offscreen rendering）"></a>离屏渲染（offscreen rendering）</h1><p>关于离屏渲染的概念推荐这篇文章 <a href="https://www.jianshu.com/p/ca51c9d3575b" target="_blank" rel="noopener">离屏渲染优化详解：实例示范+性能测试 - 简书</a>，我们主要说说具体的离屏渲染优化方案。</p><h2 id="圆角-cornerRadius"><a href="#圆角-cornerRadius" class="headerlink" title="圆角 cornerRadius"></a>圆角 cornerRadius</h2><p>首先了解下 cornerRadius 概念，参考 <a href="https://developer.apple.com/documentation/quartzcore/calayer/1410818-cornerradius" target="_blank" rel="noopener">cornerRadius - CALayer | Apple Developer Documentation</a>：</p><blockquote><p>Setting the radius to a value greater than 0.0 causes the layer to begin drawing rounded corners on its background. By default, the corner radius does not apply to the image in the layer’s contents property; it applies only to the background color and border of the layer. However, setting the masksToBounds property to true causes the content to be clipped to the rounded corners.  </p></blockquote><p>声明一点，单纯的设置 <code>layer.cornerRadius</code> 是不会造成任何性能问题的，只有配合 <code>layer.masksToBounds</code> 使用时才会造成离屏渲染（根据试验在 iOS 10 and later 的系统这样设置大部分 UIKit 控件也不会再触发离屏渲染）。在默认情况下，这个属性只会影响 layer 的 background color 和 border，对于 layer 中的 content 的内容是无法奏效。所以我们对以下 UIKit 控件做分析（下面的方法是针对 iOS 10 and later 不触发离屏渲染的方法）：</p><table><thead><tr><th>UIKit</th><th>iOS 9 &amp; Before</th><th>iOS 10 &amp; Later</th></tr></thead><tbody><tr><td>UIView</td><td>只设置 <code>cornerRadius</code></td><td>只设置 <code>cornerRadius</code></td></tr><tr><td>UIImageView</td><td>下方原理解释</td><td>只设置 <code>cornerRadius 和 masksToBounds</code></td></tr><tr><td>UIButton (不设置背景图或 Image)</td><td>只设置 <code>cornerRadius</code></td><td>只设置 <code>cornerRadius</code></td></tr><tr><td>UILabel</td><td>下方原理解释</td><td>设置 <code>cornerRadius 和 masksToBounds</code></td></tr></tbody></table><p>如果是 iOS 10 &amp; Later，可以放心的使用系统方法，除了带图片的 UIButton 其他的控件直接使用不会造成离屏渲染。<br>如果是 iOS 9 &amp; Before，分为以下几种情况：</p><ul><li>UI 提供已经切好的圆角图片；</li><li>混合图层：在要添加圆角的视图上再叠加一个部分透明的视图，只对圆角部分进行遮挡，颜色与背景色相同，可以参考代码 <a href="https://gist.github.com/seedante/84aae946cf91ad099f7814bb6b40a583" target="_blank" rel="noopener">Draw a mask image with Core Graphics API in Swift · GitHub</a>。</li></ul><h3 id="UIImageView"><a href="#UIImageView" class="headerlink" title="UIImageView"></a>UIImageView</h3><p>低版本系统，上述提到的混合图层方法是一种思路，另外可以直接对图片进行剪裁，方法如下：</p><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/ResponseChain/WithRoundedCorners.png" alt="WithRoundedCorners"></p><p>因为是贝塞尔曲线的路径，你可以扩展成选择哪几个角有圆角效果，这边不做详细论述。</p><h3 id="UIButton-设置背景图或-Image"><a href="#UIButton-设置背景图或-Image" class="headerlink" title="UIButton 设置背景图或 Image"></a>UIButton 设置背景图或 Image</h3><p>不论系统版本高低，分如下几种情况：</p><ul><li>只有文字的 UIButton 只设置 <code>cornerRadius</code> 即可，不要设置 <code>masksToBounds</code>；</li><li>如果是有图片或者背景图片的 UIButton，方法一使用混合图层，方法二用上述图片剪裁后再设置；</li></ul><h3 id="UILabel"><a href="#UILabel" class="headerlink" title="UILabel"></a>UILabel</h3><p>文本类视图 layer 的 contents 默认是透明的(字符就在这个透明的环境里绘制、显示)，只需要设置 layer 的backgroundColor，再加上 cornerRadius 就可以实现圆角。但是 UILabel 的 backgroundColor 不是对 layer 而是对 content 的背景进行设置，所以不使用 backgroundColor 以及不 IB 里面设置，用如下方法实现即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">label.layer.backgroundColor = color</span><br><span class="line">label.layer.cornerRadius = 5</span><br></pre></td></tr></table></figure><p>UITextField 自带圆角风格，UITextView 可以用类似的方法进行设置。</p><blockquote><p>疑问：发现 UITextView 设置圆角在输入文本后，出现离屏渲染；文本为空时，不会出现离屏渲染。原理暂时未搞清楚。  </p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>如果能只用 cornerRadius 解决问题，不会造成离屏渲染；</li><li>如果必须设置 masksToBounds，若圆角视图的数量较少（一页只有几个）可以考虑不用优化；若数量多参考上述方案优化，尤其在滚动列表中；</li><li>任何时候优先考虑避免触发离屏渲染，无法避免时使用 Rasterization（适用于静态内容的视图，也就是内部结构和内容不发生变化的视图）；</li></ol><h2 id="阴影-shadow"><a href="#阴影-shadow" class="headerlink" title="阴影 shadow"></a>阴影 shadow</h2><p>使用阴影的前提条件是 layer.masksToBounds = false，因此阴影与系统圆角不兼容。</p><p>根据 <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/LayerStyleProperties/LayerStyleProperties.html#//apple_ref/doc/uid/TP40004514-CH10-SW18" target="_blank" rel="noopener">Layer Style Property Animations</a> 文档说明，阴影是和视图合成的，位于视图的下方。并且根据 <a href="https://developer.apple.com/documentation/quartzcore/calayer/1410771-shadowpath" target="_blank" rel="noopener">shadowPath - CALayer | Apple Developer Documentation</a> ，默认的阴影路径是 nil。未指定的情况下，阴影是沿着视图非透明部分扩展，如下图所示：</p><p><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/Art/visual-shadow_2x.png" alt></p><p>通过设置 <code>shadowPath</code> 来设置阴影来避免离屏渲染，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">imageView.layer.masksToBounds = false</span><br><span class="line">imageView.layer.shadowColor = UIColor.red.cgColor</span><br><span class="line">imageView.layer.shadowOpacity = 1.0 //此参数默认为0，即阴影不显示</span><br><span class="line">imageView.layer.shadowRadius = 2.0 //给阴影加上圆角，对性能无明显影响</span><br><span class="line">imageView.layer.shadowOffset = CGSize(width: 5, height: 5)</span><br><span class="line">let path = UIBezierPath(rect: imageView.bounds) //设定路径：与视图的边界相同</span><br><span class="line">imageView.layer.shadowPath = path.cgPath//路径默认为 nil</span><br></pre></td></tr></table></figure><h2 id="遮罩-masks"><a href="#遮罩-masks" class="headerlink" title="遮罩 masks"></a>遮罩 masks</h2><p>利用遮罩是可以画圆角的，大多数的使用情况是在特殊性质的 view，需要使用 layer mask 来渲染。<br>注意一下两点：</p><ul><li>一旦使用 mask，必定会造成离屏渲染；</li><li>不常变动的打开 shouldRasterize 对渲染结果进行缓存，可以很大程度的提升 FPS；</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其他的 GroupOpacity、EdgeAntialiasing 在 iOS 10 &amp; Later 后做了优化，日常使用场景较少，不做过多说明。</p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>类似于 UITableView、UICollectionView 等滚动视图最能反映界面是否流畅，且也最容易出现肉眼可见的不流畅现象。系统对于该视图也有优化，比如常见的在滑动时将 RunLoop 的模式切换到 UITrackingRunLoopMode。</p><p>根据开篇的文章，我们知道视图在显示的过程中，CPU 和 GPU 分别承担了部分工作，所以我们做列表层面的优化也要从这两个方面分别入手，我们着重补充下 CPU 部分，GPU 可以直接参考开篇文章。</p><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p>在滑动过程中CPU占用特点是：</p><ul><li>滑动时CPU占用率高、空闲时占用率低</li><li>主线程CPU占用率高、子线程占率低</li></ul><p>我们根据上述两个特别分别做优化。</p><h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><p>将滑动时的高占用率平摊到空闲时，在空闲时进行预加载。</p><ul><li>iOS 10 &amp; Later，UITableView 和 UICollectionView 提供了预加载机制</li><li>iOS12 开始 prefeatching 做了优化，不再与 cell 加载同时并发进行，而是 cell 加载完成之后串行开始prefeatch，从而优化了流畅度</li><li>加载内容：<ul><li>cell 高度、布局计算</li><li>网络数据和图片</li></ul></li></ul><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>涉及到 UIKit 的操作一定是在主线程的，我们只能从以下几个层面去考虑子线程处理：</p><ul><li>图片解码（TODO）<ul><li>当你用 UIImage 或 CGImageSource 的那几个方法创建图片时，图片数据并不会立刻解码。图片设置到 UIImageView 或者 CALayer.contents 中去，并且 CALayer 被提交到 GPU 前，CGImage 中的数据才会得到解码。这一步是发生在主线程的，并且不可避免。如果想要绕开这个机制，常见的做法是在后台线程先把图片绘制到 CGBitmapContext 中，然后从 Bitmap 直接创建图片。目前常见的网络图片库都自带这个功能。</li></ul></li><li>文本计算<ul><li>如果一个界面中包含大量文本（比如微博微信朋友圈等），文本的宽高计算会占用很大一部分资源，并且不可避免。如果你对文本显示没有特殊要求，可以参考下 UILabel 内部的实现方式：用 [NSAttributedString boundingRectWithSize:options:context:] 来计算文本宽高，用 -[NSAttributedString drawWithRect:options:context:] 来绘制文本。尽管这两个方法性能不错，但仍旧需要放到后台线程进行以避免阻塞主线程。如果你用 CoreText 绘制文本，那就可以先生成 CoreText 排版对象，然后自己计算了，并且 CoreText 对象还能保留以供稍后绘制使用。</li></ul></li><li>文本渲染<ul><li>屏幕上能看到的所有文本内容控件，包括 UIWebView，在底层都是通过 CoreText 排版、绘制为 Bitmap 显示的。常见的文本控件 （UILabel、UITextView 等），其排版和绘制都是在主线程进行的，当显示大量文本时，CPU 的压力会非常大。对此解决方案只有一个，那就是自定义文本控件，用 TextKit 或最底层的 CoreText 对文本异步绘制。尽管这实现起来非常麻烦，但其带来的优势也非常大，CoreText 对象创建好后，能直接获取文本的宽高等信息，避免了多次计算（调整 UILabel 大小时算一遍、UILabel 绘制时内部再算一遍）；CoreText 对象占用内存较少，可以缓存下来以备稍后多次渲染。</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="noopener">iOS 保持界面流畅的技巧 | Garan no dou</a></li><li><a href="https://draveness.me/asdk-rendering" target="_blank" rel="noopener">使用 ASDK 性能调优 - 提升 iOS 界面的渲染性能</a></li><li><a href="https://zhuanlan.zhihu.com/p/72653360" target="_blank" rel="noopener">关于iOS离屏渲染的深入研究 - 知乎</a></li><li><a href="https://wereadteam.github.io/2016/05/03/WeRead-Performance/" target="_blank" rel="noopener">微信读书 iOS 性能优化总结 | WeRead团队博客</a></li><li><a href="https://www.jianshu.com/p/ca51c9d3575b" target="_blank" rel="noopener">离屏渲染优化详解：实例示范+性能测试 - 简书</a></li><li><a href="https://juejin.im/post/5b72aaf46fb9a009764bbb6a#heading-1" target="_blank" rel="noopener">iOS性能优化系列篇之“列表流畅度优化” - 掘金</a></li><li><a href="https://xiaozhuanlan.com/topic/0891367254" target="_blank" rel="noopener">iOS 界面流畅性优化 － 小专栏</a></li></ul><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2020/02/05/smooth_user_interfaces_for_ios/">http://yeziahehe.com/2020/02/05/smooth_user_interfaces_for_ios/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先建议大家先读一读这篇文章 &lt;a href=&quot;https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iOS 保持界面流畅的技巧
      
    
    </summary>
    
      <category term="技术" scheme="http://yeziahehe.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>事件响应机制</title>
    <link href="http://yeziahehe.com/2020/01/19/responder_chain/"/>
    <id>http://yeziahehe.com/2020/01/19/responder_chain/</id>
    <published>2020-01-19T06:00:17.000Z</published>
    <updated>2020-02-07T07:18:50.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件响应机制"><a href="#事件响应机制" class="headerlink" title="事件响应机制"></a>事件响应机制</h1><p>上面我们提到 UIKit 主要是通过响应者（UIResponder）来响应用户事件，那么系统是如何来处理的呢？</p><h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><p>首先我们看下目前系统的定义的 <code>UIEventType</code>，我们主要通过 UIEventTypeTouches 来了解下事件响应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, UIEventType) &#123;</span><br><span class="line">    UIEventTypeTouches, // 触摸事件</span><br><span class="line">    UIEventTypeMotion, // 晃动事件</span><br><span class="line">    UIEventTypeRemoteControl, // 远程控制事件，主要是外部辅助设备或者耳机的远程命令，例如控制音乐声音的大小，或者下一首歌。</span><br><span class="line">    UIEventTypePresses API_AVAILABLE(iOS(9.0)), // 物理按键事件</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="从一个触摸事件说起"><a href="#从一个触摸事件说起" class="headerlink" title="从一个触摸事件说起"></a>从一个触摸事件说起</h2><p>我们为了搞清楚事件响应机制，我们用触摸事件来进行举例。当触摸事件发生的时候，一直到找到对应这个事件的响应，我把这个过程分为两步：</p><ul><li>通过事件传递机制找到 <strong>First Responder</strong></li><li><strong>First Responder</strong> 通过事件响应链找到 <strong>Touch Event</strong></li></ul><p><strong>ps: 用触摸事件举例是因为有些事件是不需要通过事件传递和响应机制来寻找 First Responder，比如与加速计、陀螺仪、磁力仪相关的运动事件是直接通过 Core Motion 派发的。</strong></p><h2 id="事件传递机制"><a href="#事件传递机制" class="headerlink" title="事件传递机制"></a>事件传递机制</h2><blockquote><p>UIKit uses view-based hit-testing to determine where touch events occur. Specifically, UIKit compares the touch location to the bounds of view objects in the view hierarchy. The  <code>hitTest:withEvent:</code> method of  UIView  traverses the view hierarchy, looking for the deepest subview that contains the specified touch, which becomes the first responder for the touch event.  </p></blockquote><p>当点击屏幕时，系统会产生一个触摸事件 UIEvent，系统会把这个 UIEvent 放到 Application 的事件队列中，Application 会把事件分发下去。首先响应的是 UIWindow，他会调用 <code>hitTest:withEvent:</code> ，找到能够响应事件的 UIView。UIView 会通过 <code>hitTest:withEvent:</code> 根据触摸事件的 location 在视图的层级结构中进行遍历，找到包含该触摸的层级最深的子视图，定义这个视图作为响应事件（touch event）的 first responder。</p><p>我们通过下面的例子，来详细说明两个原理：</p><ul><li>如何进行遍历？</li><li>hitTest 怎么工作的？</li></ul><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/ResponseChain/Example.png" alt="Example"></p><h3 id="逆先序深度优先遍历算法"><a href="#逆先序深度优先遍历算法" class="headerlink" title="逆先序深度优先遍历算法"></a>逆先序深度优先遍历算法</h3><p>如上图例子所示，当我们点击 View B.1 的时候，如何进行遍历来确认该 View 是 first responder？</p><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/ResponseChain/Tree.png" alt="Tree"></p><p>系统会根据 view 添加的顺序，确定其在 subview 数组中的顺序。我们将视图的树形结构画出来，针对这个树，是按照逆先序深度优先遍历。根据图上绿色箭头所示的顺序，查找到 B.1 为响应最合适的 view。顺序如下：</p><p><code>UIWindow -&gt; MainView -&gt; View C -&gt; View B -&gt; View B.2 -&gt; View B.1</code></p><h3 id="hitTest-withEvent"><a href="#hitTest-withEvent" class="headerlink" title="hitTest:withEvent:"></a>hitTest:withEvent:</h3><p>根据上面的遍历算法，我们聊一聊 <code>hitTest:withEvent:</code> 的实现原理。UIWindow 拿到事件后，首先会将事件传递给最靠近的 view，然后调用 <code>hitTest:withEvent:</code> 方法，并按照步骤遵循以下的原则：</p><ul><li>根据如下三个属性判断 view &amp; subview 是否接受事件，若下面三个属性设置如下，则方法会自动忽略该 view &amp; subview<ul><li>isUserInteractionEnabled = false</li><li>isHidden = true</li><li>alpha &lt;= 0.01</li></ul></li><li>根据 <code>pointInside:withEvent:</code> 判断点是否在当前 view 内</li><li>如果在判断是否有 subview，没有 subview 返回自身；有子视图继续遍历</li></ul><p>根据上面的原则，我们可以大概推断出 <code>hitTest:withEvent:</code> 的实现原理代码如下：</p><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/ResponseChain/HitTest.png" alt="HitTest"></p><h4 id="重写-hitTest-withEvent-场景"><a href="#重写-hitTest-withEvent-场景" class="headerlink" title="重写 hitTest:withEvent: 场景"></a>重写 hitTest:withEvent: 场景</h4><ul><li>改变 touch 区域大小，比较典型的例子就是 tabbar 中间按钮超出高度的情况下仍然需要点击；</li><li>制定某一个 view 来响应事件，注意的是尽可能在父 view 中去返回要响应的 view，防止再向下遍历；</li></ul><h2 id="事件响应链"><a href="#事件响应链" class="headerlink" title="事件响应链"></a>事件响应链</h2><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/ResponseChain/ResponsChain.png" alt="ResponsChain"></p><blockquote><p>Apps receive and handle events using <em>responder objects</em>. A responder object is any instance of the  UIResponder  class, and common subclasses include UIView,  UIViewController, and  UIApplication. Responders receive the raw event data and must either handle the event or forward it to another responder object. When your app receives an event, UIKit automatically directs that event to the most appropriate responder object, known as the <em>first responder</em>.<br>Unhandled events are passed from responder to responder in the active <em>responder chain</em>, which is the dynamic configuration of your app’s responder objects.    </p></blockquote><p>根据官方文档 <a href="https://developer.apple.com/documentation/uikit/touches_presses_and_gestures/using_responders_and_the_responder_chain_to_handle_events?language=objc" target="_blank" rel="noopener">Using Responders and the Responder Chain to Handle Events | Apple Developer Documentation</a> ，我们发现事件响应链和事件传递完全是相反的过程。最有机会处理事件的就是通过事件传递找到的 first responder，如果没有进行处理，就会沿着事件响应链传递给下一个响应者 nextResponder，一直追溯到最上层 UIApplication。若都没有进行处理，就丢弃事件。</p><h3 id="处理事件"><a href="#处理事件" class="headerlink" title="处理事件"></a>处理事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event;</span><br><span class="line">- (void)touchesMoved:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event;</span><br><span class="line">- (void)touchesEnded:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event;</span><br><span class="line">- (void)touchesCancelled:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event;</span><br></pre></td></tr></table></figure><p>对于触摸事件，系统提供了上面四种方法来处理。如果重写了上述方法，那么事件就会在此中断，并且不再沿着事件响应链进行传递；如果需要继续进行传递，则需要调用 <code>super</code> 方法。</p><h3 id="决定第一响应者"><a href="#决定第一响应者" class="headerlink" title="决定第一响应者"></a>决定第一响应者</h3><p>我们上面通过事件传递机制寻找 first responder 主要是针对 UIEventTypeTouches 事件，但是 UIKit 决定 first responder 是根据事件类型来的。</p><table><thead><tr><th>Event type</th><th>First responder</th></tr></thead><tbody><tr><td>Touch events</td><td>触摸发生的 view</td></tr><tr><td>Press events</td><td>聚焦的对象</td></tr><tr><td>Shake-motion events</td><td>用户（UIKit）制定的对象</td></tr><tr><td>Remote-control events</td><td>用户（UIKit）制定的对象</td></tr><tr><td>Editing menu messages</td><td>用户（UIKit）制定的对象</td></tr></tbody></table><blockquote><p>与加速计、陀螺仪、磁力仪相关的运动事件，不遵循事件响应链。Core Motion 直接将这些事件传递给指定的对象。更多信息参照  <a href="https://developer.apple.com/library/archive/documentation/Miscellaneous/Conceptual/iPhoneOSTechOverview/CoreServicesLayer/CoreServicesLayer.html#//apple_ref/doc/uid/TP40007898-CH10-SW27" target="_blank" rel="noopener">Core Motion Framework</a>   </p></blockquote><h3 id="改变响应链"><a href="#改变响应链" class="headerlink" title="改变响应链"></a>改变响应链</h3><p>在 UIResponse 类中有一个 <code>nextResponder</code> 属性，可以通过重写该属性来改变事件响应链。很多的系统类就通过这个属性改变了 next responder：</p><ul><li><strong>UIView</strong>，如果 view 的 root view 是 UIViewController，则 next responder 是 UIViewController；否则，next responder 是 super view；</li><li><strong>UIViewController</strong><ul><li>如果 view controller 是 UIWindow 的 root view ，那么 next responder 是 UIWindow；</li><li>如果 view controller 是被另一个 view controller presented 出来，那么 next responder 是 presenting view controller；</li></ul></li><li><strong>UIWindow</strong>，next responder 是 UIApplication；</li><li><strong>UIApplication</strong>, next responder 是 app delegate；</li></ul><h2 id="事件是怎么被接收的？"><a href="#事件是怎么被接收的？" class="headerlink" title="事件是怎么被接收的？"></a>事件是怎么被接收的？</h2><p>我们上面讲了事件传递和事件响应，最后我们再来说说事件是怎么被接收的，<strong>接收</strong>指的是怎么由一个物理操作变成了可以传递的事件。</p><p>背后的力量是 Runloop 机制。具体的过程引用了 <a href="https://blog.ibireme.com/2015/05/18/runloop/" target="_blank" rel="noopener">深入理解RunLoop | Garan no dou</a> 中的段落：</p><blockquote><p>苹果注册了一个 Source1 (基于 mach port 的) 用来接收系统事件，其回调函数为 __IOHIDEventSystemClientQueueCallback()。<br>当一个硬件事件(触摸/锁屏/摇晃等)发生后，首先由 IOKit.framework 生成一个 IOHIDEvent 事件并由 SpringBoard 接收。这个过程的详细情况可以参考 <a href="http://iphonedevwiki.net/index.php/IOHIDFamily" target="_blank" rel="noopener">这里</a> 。SpringBoard 只接收按键(锁屏/静音等)，触摸，加速，接近传感器等几种 Event，随后用 mach port 转发给需要的App进程。随后苹果注册的那个 Source1 就会触发回调，并调用 _UIApplicationHandleEventQueue() 进行应用内部的分发。<br>_UIApplicationHandleEventQueue() 会把 IOHIDEvent 处理并包装成 UIEvent 进行处理或分发，其中包括识别 UIGesture/处理屏幕旋转/发送给 UIWindow 等。通常事件比如 UIButton 点击、touchesBegin/Move/End/Cancel 事件都是在这个回调中完成的。  </p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.apple.com/documentation/uikit/touches_presses_and_gestures/using_responders_and_the_responder_chain_to_handle_events?language=objc" target="_blank" rel="noopener">Using Responders and the Responder Chain to Handle Events | Apple Developer Documentation</a></li><li><a href="http://smnh.me/hit-testing-in-ios/" target="_blank" rel="noopener">Hit-Testing in iOS</a></li><li><a href="https://blog.boolchow.com/2018/03/25/iOS-Event-Response/" target="_blank" rel="noopener">iOS 中的事件响应与处理 · Hexo</a></li></ul><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2020/01/19/responder_chain/">http://yeziahehe.com/2020/01/19/responder_chain/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事件响应机制&quot;&gt;&lt;a href=&quot;#事件响应机制&quot; class=&quot;headerlink&quot; title=&quot;事件响应机制&quot;&gt;&lt;/a&gt;事件响应机制&lt;/h1&gt;&lt;p&gt;上面我们提到 UIKit 主要是通过响应者（UIResponder）来响应用户事件，那么系统是如何来处理的呢
      
    
    </summary>
    
      <category term="技术" scheme="http://yeziahehe.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>从 UI 操作在主线程聊起</title>
    <link href="http://yeziahehe.com/2020/01/19/UIKit_in_main_thread/"/>
    <id>http://yeziahehe.com/2020/01/19/UIKit_in_main_thread/</id>
    <published>2020-01-19T05:57:58.000Z</published>
    <updated>2020-01-19T06:08:07.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从-UI-操作在主线程聊起"><a href="#从-UI-操作在主线程聊起" class="headerlink" title="从 UI 操作在主线程聊起"></a>从 UI 操作在主线程聊起</h1><p>在开发过程中，会经常做的一件事就是在主线程中去刷新 UI，基于这个操作我们作如下几个思考。</p><ul><li>为什么 UI 操作一定要在主线程？</li><li>如果把 UI 操作放到后台线程会出现什么样的情况呢？</li></ul><h2 id="从-UIKit-说起"><a href="#从-UIKit-说起" class="headerlink" title="从 UIKit 说起"></a>从 UIKit 说起</h2><p>我们首先先了解一下 <a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="noopener">UIKit | Apple Developer Documentation</a>  ，简单概括就是在 <strong>主线程</strong> 响应用户事件、展示视图。文档里面特别强调了一段话：</p><blockquote><p><strong>Important</strong><br>Use UIKit classes only from your app’s main thread or main dispatch queue, unless otherwise indicated. This restriction particularly applies to classes derived from UIResponder or that involve manipulating your app’s user interface in any way.  </p></blockquote><p>这段话强调了 UIKit 所有类（尤其是 UIResponder 的派生类），除非另有说明，否则只能在以下两个场景里面调用：</p><ul><li>main thread - 主线程</li><li>main dispatch queue -  主调度队列</li></ul><h2 id="Why？"><a href="#Why？" class="headerlink" title="Why？"></a>Why？</h2><p>我们思考一下，在主线程来执行 UIKit 类，目的是为了保证线程安全。那么，从而就能知道 UIKit 一定 <strong>不是线程安全</strong> 的类，如果我们同时在多个线程来进行 UI 的异步操作，肯定造成读写问题，但是为了保证 UI 的流畅性，对 UIKit 做加锁则会导致大量的性能消耗，从而影响运行、渲染速度。</p><p>另外还有一点，根据事件响应机制（UIResponder）知道，所有的事件响应一定是在主线程。所以文档中规定 UI 操作一定要在主线程中串行执行，其实就是人为的加锁，既高效又同时保证了线程安全。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.im/post/5c406d97e51d4552475fe178" target="_blank" rel="noopener">iOS拾遗——为什么必须在主线程操作UI</a></li><li><a href="https://objccn.io/issue-2-4/" target="_blank" rel="noopener">ObjC 中国 - 线程安全类的设计</a></li></ul><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2020/01/19/UIKit_in_main_thread/">http://yeziahehe.com/2020/01/19/UIKit_in_main_thread/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从-UI-操作在主线程聊起&quot;&gt;&lt;a href=&quot;#从-UI-操作在主线程聊起&quot; class=&quot;headerlink&quot; title=&quot;从 UI 操作在主线程聊起&quot;&gt;&lt;/a&gt;从 UI 操作在主线程聊起&lt;/h1&gt;&lt;p&gt;在开发过程中，会经常做的一件事就是在主线程中去刷新 
      
    
    </summary>
    
      <category term="技术" scheme="http://yeziahehe.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>从 xx_ 前缀向 xx. 命名空间协议转变</title>
    <link href="http://yeziahehe.com/2019/05/30/LazySequence/"/>
    <id>http://yeziahehe.com/2019/05/30/LazySequence/</id>
    <published>2019-05-30T03:09:30.000Z</published>
    <updated>2019-05-30T08:32:07.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>最近在写新项目的时候，在一个下拉组件中看到了 .es 的语法，于是想到了很多的第三库如 Kingfisher, RxSwift 都使用了类似的 .kf, .rx 语法，从而引发了一段思考。</p><p>首先说说这个语法出现的场景，通常自己写的类或者封装的组件都会自己加前缀，但是在系统方法扩展的时候官方在 OC 时代给到的推荐是 <strong>前缀_</strong> 的方式，在 Swift 语言出现后一段时间，开发者保留了这样的写法，但是因为 Swift 语言的发展，以及语言的特性，面向协议编程 (Protocol Oriented Programming，以下简称 POP)，从而引出下面的写法。</p><h1 id="rx"><a href="#rx" class="headerlink" title=".rx"></a>.rx</h1><p>因为是 RxSwift 的使用者，很早的时候记得当时的语法糖是 <strong>rx_</strong>, 这个是非常重度的 OC 语法推荐写法，在自己对系统方法进行扩展的时候需要加上前缀，方式方法名称重复。但是我们发现后续版本中这个语法糖做出了改变，大家可以参考 RxSwift 的这个帖子 <a href="https://github.com/ReactiveX/RxSwift/issues/826" target="_blank" rel="noopener">[RxCocoa] Move from <code>rx_</code> prefix to a <code>rx.</code> proxy (for Swift 3 update ?)</a>，这篇帖子的标题解释了一个很重要的概念，就是 rx_ 向 rx. 转变的时候是由带前缀的方法名称向协议去转变，通过拥有对象的协议去实现扩展方法。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>鉴于上面 RxSwift Issue 时间比较久远，这边提供几个近期的完整实现：</p><ul><li><a href="https://github.com/onevcat/Kingfisher/blob/master/Sources/General/Kingfisher.swift" target="_blank" rel="noopener">喵神的 Kingfisher</a></li><li><a href="https://github.com/apple/swift/blob/master/stdlib/public/core/LazySequence.swift" target="_blank" rel="noopener">Swift 中的 LazySequence</a></li></ul><h2 id="实现-Base"><a href="#实现-Base" class="headerlink" title="实现 Base"></a>实现 Base</h2><p>实现一个 Base 的 Struct/ Class，推荐 Struct。</p><p>这个 Struct 将真实的对象包裹起来，作为一个泛型结构体，不做任何实际操作。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">KingfisherWrapper</span>&lt;<span class="title">Base</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> base: <span class="type">Base</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> base: <span class="type">Base</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.base = base</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现-Protocol-和-kf-方法"><a href="#实现-Protocol-和-kf-方法" class="headerlink" title="实现 Protocol 和 .kf 方法"></a>实现 Protocol 和 .kf 方法</h2><p>定一个 protocol，不实现任何变量方法声明，防止其他的 protocol 继承会修改到变量方法的实现。</p><p>然后实现 protocol 的 extension，提供一个 default implementation，这边其实就是实现了一个 kf 的属性，这个属性是 KingfisherWrapper 的实例，<code>public var kf: KingfisherWrapper&lt;Self&gt;</code> Self 用在协议里面，代表的是遵守协议的对象（类／结构体／枚举）类型，即 Base 类型，根据 Base 类的不同，实现对应类里面的方法。</p><p>这样，就相当于实现了 <code>kf</code> 的命名空间。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">KingfisherCompatible</span>: <span class="title">AnyObject</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">KingfisherCompatible</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Gets a namespace holder for Kingfisher compatible types.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> kf: <span class="type">KingfisherWrapper</span>&lt;<span class="type">Self</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="type">KingfisherWrapper</span>(<span class="keyword">self</span>) &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将-Protocol-加载到所需的-Base-类并通过Extension-where-Base-实现-Base-类的特定代码"><a href="#将-Protocol-加载到所需的-Base-类并通过Extension-where-Base-实现-Base-类的特定代码" class="headerlink" title="将 Protocol 加载到所需的 Base 类并通过Extension + where Base 实现 Base 类的特定代码"></a>将 Protocol 加载到所需的 Base 类并通过Extension + where Base 实现 Base 类的特定代码</h2><p>将我们需要扩展的系统类遵循 protocol，这样对应的 KingfisherWrapper 对象就可以实现对应的系统类里面的方法。</p><p>在实现方法里面有个特别要注意的点，所以 UIImageView 的属性，即可以用 <code>self.</code> 调用的属性都需要变成 <code>base.</code>，因为这边的调用 <code>.kf</code> 的时候每次返回的都是全新的 KingfisherWrapper 实例对象，并不是调用本身对象。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImage</span>: <span class="title">KingfisherCompatible</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Kingfisher</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UIImageView</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">setImage</span><span class="params">(image: UIImage)</span></span> &#123;</span><br><span class="line">        base.image = image</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>从上面的分析中来看，这样通过协议命名空间方法实现的 extension 看上去会跟优雅，也能过解决在项目中 manually 方式引入第三方库的时候，出现同名的扩展引起的冲突。但是在扩展的时候我同样发现一个问题，对于 <code>initializers methods</code> 是没办法使用命名空间去扩展的，我们只能对应的给一个 func 返回设置好的 Color 作为返回值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">convenience</span> <span class="keyword">init</span>(hex: <span class="type">Int</span>, alpha: <span class="type">CGFloat</span> = <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> t_alpha = alpha</span><br><span class="line">        <span class="keyword">if</span> t_alpha &lt; <span class="number">0</span> &#123; t_alpha = <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> t_alpha &gt; <span class="number">1</span> &#123; t_alpha = <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> red = (hex &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">let</span> green = (hex &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">let</span> blue = hex &amp; <span class="number">0xff</span></span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(red: red, green: green, blue: blue, alpha: t_alpha)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2019/05/30/LazySequence/">http://yeziahehe.com/2019/05/30/LazySequence/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;最近在写新项目的时候，在一个下拉组件中看到了 .es 的语法，于是想到了很多的第三库如 Kingfisher, RxSwif
      
    
    </summary>
    
      <category term="技术" scheme="http://yeziahehe.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yeziahehe.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Bye 2017，Hi 2018</title>
    <link href="http://yeziahehe.com/2018/01/02/Bye%202017%EF%BC%8CHi%202018/"/>
    <id>http://yeziahehe.com/2018/01/02/Bye 2017，Hi 2018/</id>
    <published>2018-01-02T03:02:43.000Z</published>
    <updated>2018-01-02T04:54:01.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>又是一年新，三百六十度。仍然记得去年写总结的时候，2017 年算是思想变化很大的一年，有太多的感悟。</p><h1 id="Bye-2017"><a href="#Bye-2017" class="headerlink" title="Bye 2017"></a>Bye 2017</h1><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>在年中离职之后，休息了一段时间，因为苏州互联网的环境，始终没有找到称心如意的工作，于是尝试了 soho。到目前为止，工作了差不多一个季度，工作的内容和企业相差无多，只是一个人在家，规律的作息和工作的安排才是最大的挑战。没有上下班时间的打卡，从头到尾的任务制，如何自律以及如何让自己的情绪保持的很好才是 soho 所面临的最大的问题。soho 的优势在于薪资方面确实比苏州本地的企业要高出很多，时间安排也相对自由；劣势在于不存在企业里面的晋升制度，且没有与人沟通的机会，并且提高自己的效率是个挑战。目前相对来说，我还是比较适应这种模式，初入职场，花时间研究技术以及得到较高的报酬，迅速的积累原始资本，然后合理的投资理财。</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>说实话，这一年的技术应该是在退步的。在学校里面，对技术的热情是在工作后无法达到的。工作是要解决生活问题，不可能那么纯粹的去钻研技术，我想以前大学宿舍深夜唱红歌、学技术的时光应该一去不复返了。同样苏州的互联网环境也确实比不上一线城市，室友在寻觅一圈之后，还是选择了脱产读研，我能认同他的想法，这也许是改变现确定性最大的一个选择。考上 985 的研究生，选一个高端的方向，然后努力刷题，进大厂，一样的套路但是确实最能够预见到的。其他的选择，未知性太大，当然同样带来的机遇也会更大。</p><p>移动互联网的浪潮似乎是过了，至少 2017 年的工作岗位明显少，打杂岗位要的人越来越少，高端岗位同样一直在招聘。前几年的培训班搞了一波 iOS，导致这几年 1-3 年的人很难混下去。现在更多的人再聊 AI，可能炒的越火，泡沫越大，这个方向远远没到技术门槛可以下放到整个市场随意招聘的程度。倒是区块链，我觉得未来几年属于可以研究的方向，确实到了爆发的时机了。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>今年去了杭州，看了看杭州的互联网环境，也拜访了之前大学最好的室友。今年还和父母一起去了三亚，赶在圣诞节左右，难得的亲子时光。很多年也没有出去旅游了，说实话，和父母亲在一起的更多的是踏实，是内心的一种安稳，与跟其他人在一起的感觉是不一样的。其他零碎的地方我是记不起来了，明年可能会增加更多的出游机会。</p><p>今年年中也住到了自己买的房子里面，与我而言没有什么太大的差别，从来没有租过单间，体验不了别人说的安定。不过房贷的压力，还是让我今年一年减少了很多活动，好在 soho 的 offer 给到后，收入有了明显的提高，年末的三个月没有那么捉襟见肘了。</p><h2 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h2><p>年末手上积累了一些财富，房贷应该说拿走了我大部分的收入，好在这属于大杠杆，稳赚不赔的生意，也没有什么好后悔的，只是前几年的生活稍微辛苦一些。因为手上积累的一点积蓄，年末开始学习理财知识，也尝试性的购入了股票型、债券型、货币型的基金，属于刚刚入门，慢慢摸索的阶段吧。同时在了解下美股、港股以及评论区永远骂声一片的，明年准备在股市方面也投入一些时间和金钱。</p><h1 id="Hi-2018"><a href="#Hi-2018" class="headerlink" title="Hi 2018"></a>Hi 2018</h1><p>接下来的一年，对自己的要求会更多一些。离开校园有一段时间了，接下来的需要适应社会，而且未来几年也会成立家庭，拥有子女，肩上的担子应该会更重些。</p><h2 id="希望每日能做到的"><a href="#希望每日能做到的" class="headerlink" title="希望每日能做到的"></a>希望每日能做到的</h2><ul><li>早上起来能喝一杯温水</li><li>坚持早睡早起(22:30 ~ 7:30)</li><li>睡前读半小时书</li><li>学习英语</li><li>每周能完成 5 道算法题</li><li>坚持记账</li></ul><h2 id="生活技能"><a href="#生活技能" class="headerlink" title="生活技能"></a>生活技能</h2><ul><li>游泳</li><li>护照</li></ul><h2 id="旅游"><a href="#旅游" class="headerlink" title="旅游"></a>旅游</h2><ul><li>东三省</li><li>西安</li><li>加拿大</li></ul><h2 id="理财-1"><a href="#理财-1" class="headerlink" title="理财"></a>理财</h2><ul><li>定投基金，期望年化率 10%</li><li>长期持有中概股，港股腾讯，美股京东、欢聚时代，A 股目前看好中国平安、格力电器、比亚迪</li></ul><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><ul><li>未来简史</li><li>国富论</li><li>后续会补上更多…</li></ul><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2018/01/02/Bye">http://yeziahehe.com/2018/01/02/Bye</a> 2017，Hi 2018/</blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;又是一年新，三百六十度。仍然记得去年写总结的时候，2017 年算是思想变化很大的一年，有太多的感悟。&lt;/p&gt;
&lt;h1 id=
      
    
    </summary>
    
      <category term="随想" scheme="http://yeziahehe.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="总结" scheme="http://yeziahehe.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="2017" scheme="http://yeziahehe.com/tags/2017/"/>
    
  </entry>
  
  <entry>
    <title>Implement strStr()</title>
    <link href="http://yeziahehe.com/2017/11/18/ImplementstrStr/"/>
    <id>http://yeziahehe.com/2017/11/18/ImplementstrStr/</id>
    <published>2017-11-18T11:53:03.000Z</published>
    <updated>2019-03-31T08:45:35.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/ImplementstrStr_error.png" alt></p><p><a href="https://leetcode.com/problems/implement-strstr/description/" target="_blank" rel="noopener">LeetCode 28. Implement strStr()</a>，实现 <code>strStr()</code> 函数，返回子串在字符串中出现的起始位置，未包含则返回 -1。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>一开始我用了 Swift 本身语言的特性，如果包含返回 range，取 range 的起始位置即可。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(<span class="number">_</span> haystack: String, <span class="number">_</span> needle: String)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> !needle.isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> range = haystack.range(of: needle) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> range.lowerBound.encodedOffset</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：需要判断子字符串是否为空，是则返回 0；否则会报错如下：</p><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/ImplementstrStr.png" alt></p><p>后来想想这个方法确实投机取巧用了语言的特性，所以还是用算法解决问题，two pointer 的算法思路。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(<span class="number">_</span> haystack: String, <span class="number">_</span> needle: String)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> needle.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> needle.<span class="built_in">count</span> &gt; haystack.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> haystackChar = <span class="type">Array</span>(haystack)</span><br><span class="line">        <span class="keyword">let</span> needleChar = <span class="type">Array</span>(needle)</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; haystackChar.<span class="built_in">count</span> &#123;</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> haystackChar.<span class="built_in">count</span> - i &lt; needleChar.<span class="built_in">count</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span>..&lt;needleChar.<span class="built_in">count</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> haystackChar[i + index] == needleChar[index] &#123;</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> j == needleChar.<span class="built_in">count</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/11/18/ImplementstrStr/">http://yeziahehe.com/2017/11/18/ImplementstrStr/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-1258094708.cos.ap-shanghai.myqcloud.com
      
    
    </summary>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://yeziahehe.com/tags/String/"/>
    
      <category term="Two Pointers" scheme="http://yeziahehe.com/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>Roman to Integer</title>
    <link href="http://yeziahehe.com/2017/11/14/RomanToInteger/"/>
    <id>http://yeziahehe.com/2017/11/14/RomanToInteger/</id>
    <published>2017-11-14T15:34:48.000Z</published>
    <updated>2019-03-31T08:36:32.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/RomanToInteger.png" alt></p><p><a href="https://leetcode.com/problems/roman-to-integer/description/" target="_blank" rel="noopener">LeetCode 13. Roman to Integer</a>，题目的意思将罗马数字转换为对应的整数，范围 1~3999。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>首先肯定先了解下罗马数字的构成规则：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">I</th><th style="text-align:center">V</th><th style="text-align:center">X</th><th style="text-align:center">L</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">M</th></tr></thead><tbody><tr><td style="text-align:center">数字</td><td style="text-align:center">1</td><td style="text-align:center">5</td><td style="text-align:center">10</td><td style="text-align:center">50</td><td style="text-align:center">100</td><td style="text-align:center">500</td><td style="text-align:center">1000</td></tr></tbody></table><ol><li>相同的数字连写，所表示的数等于这些数字相加得到的数，如：Ⅲ = 3；</li><li>小的数字在大的数字的右边，所表示的数等于这些数字相加得到的数， 如：Ⅷ = 8；Ⅻ = 12；</li><li>小的数字，（限于Ⅰ、X 和C）在大的数字的左边，所表示的数等于大数减小数得到的数，如：Ⅳ= 4；Ⅸ= 9；</li><li>正常使用时，连写的数字重复不得超过三次。</li></ol><p>思路很简单，从低位向高位按位转换成整数进行加减。因为不存在违规的罗马数字，所以高位比低位低的则为减，否则则为加。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> pre = <span class="type">Int</span>.<span class="built_in">min</span></span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> character <span class="keyword">in</span> s.reversed() &#123;</span><br><span class="line">            <span class="keyword">let</span> int = toInt(character)</span><br><span class="line">            <span class="keyword">if</span> int &lt; pre &#123;</span><br><span class="line">                sum -= int</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += int</span><br><span class="line">            &#125;</span><br><span class="line">            pre = int</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">toInt</span><span class="params">(<span class="number">_</span> character: Character)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> character &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"M"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1000</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">500</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"L"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">50</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"X"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"V"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"I"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/11/14/RomanToInteger/">http://yeziahehe.com/2017/11/14/RomanToInteger/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-1258094708.cos.ap-shanghai.myqcloud.com
      
    
    </summary>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yeziahehe.com/tags/Math/"/>
    
      <category term="String" scheme="http://yeziahehe.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Integer to Roman</title>
    <link href="http://yeziahehe.com/2017/11/12/IntegerToRoman/"/>
    <id>http://yeziahehe.com/2017/11/12/IntegerToRoman/</id>
    <published>2017-11-12T15:20:05.000Z</published>
    <updated>2019-03-31T08:43:34.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/IntegerToRoman.png" alt></p><p><a href="https://leetcode.com/problems/integer-to-roman/description/" target="_blank" rel="noopener">LeetCode 12. Integer to Roman</a>，题目的意思将整数转换为对应的罗马数字，范围 1~3999。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>首先肯定先了解下罗马数字的构成规则：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">I</th><th style="text-align:center">V</th><th style="text-align:center">X</th><th style="text-align:center">L</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">M</th></tr></thead><tbody><tr><td style="text-align:center">数字</td><td style="text-align:center">1</td><td style="text-align:center">5</td><td style="text-align:center">10</td><td style="text-align:center">50</td><td style="text-align:center">100</td><td style="text-align:center">500</td><td style="text-align:center">1000</td></tr></tbody></table><ol><li>相同的数字连写，所表示的数等于这些数字相加得到的数，如：Ⅲ = 3；</li><li>小的数字在大的数字的右边，所表示的数等于这些数字相加得到的数， 如：Ⅷ = 8；Ⅻ = 12；</li><li>小的数字，（限于Ⅰ、X 和C）在大的数字的左边，所表示的数等于大数减小数得到的数，如：Ⅳ= 4；Ⅸ= 9；</li><li>正常使用时，连写的数字重复不得超过三次。</li></ol><h2 id="枚举法"><a href="#枚举法" class="headerlink" title="枚举法"></a>枚举法</h2><p>很容易想到因为限定了数字范围，不妨按位转换，罗列出个十百千位对应的数字。</p><ul><li><code>M: Nil, M, MM, MMM</code></li><li><code>C: Nil, C, CC, CCC, CD, D, DC, DCC, DCCC, CM</code></li><li><code>X: Nil, X, XX, XXX, XL, L, LX, LXX, LXXX, XC</code></li><li><code>I: Nil, I, II, III, IV, V, VI, VII, VIII, IX</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">intToRoman</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="type">M</span> = [<span class="string">""</span>, <span class="string">"M"</span>, <span class="string">"MM"</span>, <span class="string">"MMM"</span>]</span><br><span class="line">        <span class="keyword">let</span> <span class="type">C</span> = [<span class="string">""</span>, <span class="string">"C"</span>, <span class="string">"CC"</span>, <span class="string">"CCC"</span>, <span class="string">"CD"</span>, <span class="string">"D"</span>, <span class="string">"DC"</span>, <span class="string">"DCC"</span>, <span class="string">"DCCC"</span>, <span class="string">"CM"</span>]</span><br><span class="line">        <span class="keyword">let</span> <span class="type">X</span> = [<span class="string">""</span>, <span class="string">"X"</span>, <span class="string">"XX"</span>, <span class="string">"XXX"</span>, <span class="string">"XL"</span>, <span class="string">"L"</span>, <span class="string">"LX"</span>, <span class="string">"LXX"</span>, <span class="string">"LXXX"</span>, <span class="string">"XC"</span>]</span><br><span class="line">        <span class="keyword">let</span> <span class="type">I</span> = [<span class="string">""</span>, <span class="string">"I"</span>, <span class="string">"II"</span>, <span class="string">"III"</span>, <span class="string">"IV"</span>, <span class="string">"V"</span>, <span class="string">"VI"</span>, <span class="string">"VII"</span>, <span class="string">"VIII"</span>, <span class="string">"IX"</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="type">M</span>[num/<span class="number">1000</span>] + <span class="type">C</span>[num/<span class="number">100</span>%<span class="number">10</span>] + <span class="type">X</span>[num/<span class="number">10</span>%<span class="number">10</span>] + <span class="type">I</span>[num%<span class="number">10</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>在看过 <code>Discuss</code> 之后发现贪心算法，每次都去减去当前范围最大值。</p><ul><li><code>let int = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]</code></li><li><code>let roman = [&quot;M&quot;, &quot;CM&quot;, &quot;D&quot;, &quot;CD&quot;, &quot;C&quot;, &quot;XC&quot;, &quot;L&quot;, &quot;XL&quot;, &quot;X&quot;, &quot;IX&quot;, &quot;V&quot;, &quot;IV&quot;, &quot;I&quot;]</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">intToRoman</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> val = num</span><br><span class="line">        <span class="keyword">var</span> res = <span class="string">""</span></span><br><span class="line">        <span class="keyword">let</span> int = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">let</span> roman = [<span class="string">"M"</span>, <span class="string">"CM"</span>, <span class="string">"D"</span>, <span class="string">"CD"</span>, <span class="string">"C"</span>, <span class="string">"XC"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>, <span class="string">"X"</span>, <span class="string">"IX"</span>, <span class="string">"V"</span>, <span class="string">"IV"</span>, <span class="string">"I"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span>...<span class="number">12</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (val &gt;= int[index]) &#123;</span><br><span class="line">                val -= int[index]</span><br><span class="line">                res += roman[index]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/11/12/IntegerToRoman/">http://yeziahehe.com/2017/11/12/IntegerToRoman/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-1258094708.cos.ap-shanghai.myqcloud.com
      
    
    </summary>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yeziahehe.com/tags/Math/"/>
    
      <category term="String" scheme="http://yeziahehe.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Merge Two Sorted Lists</title>
    <link href="http://yeziahehe.com/2017/11/11/MergeTwoSortedLists/"/>
    <id>http://yeziahehe.com/2017/11/11/MergeTwoSortedLists/</id>
    <published>2017-11-11T14:45:42.000Z</published>
    <updated>2019-03-31T08:44:37.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/MergeTwoSortedLists.png" alt></p><p><a href="https://leetcode.com/problems/merge-two-sorted-lists/description/" target="_blank" rel="noopener">LeetCode 21. Merge Two Sorted Lists</a>，题目的意思就是合并链表。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>其实很简单的思路就是不停的比较两个链表中的元素大小，然后依次插入即可。刚刚开始写了很冗长的判断，后来看了 <code>Discuss</code> 递归的方式，原理一致，代码更加简洁。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> val: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> next: <span class="type">ListNode?</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> val: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.val = val</span><br><span class="line">        <span class="keyword">self</span>.next = <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(<span class="number">_</span> l1: ListNode?, <span class="number">_</span> l2: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> l1 == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> l2 == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> l1!.val &lt; l2!.val &#123;</span><br><span class="line">            l1?.next = mergeTwoLists(l1?.next, l2)</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l2?.next = mergeTwoLists(l1, l2?.next)</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/11/11/MergeTwoSortedLists/">http://yeziahehe.com/2017/11/11/MergeTwoSortedLists/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-1258094708.cos.ap-shanghai.myqcloud.com
      
    
    </summary>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yeziahehe.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>Plus One</title>
    <link href="http://yeziahehe.com/2017/11/07/PlusOne/"/>
    <id>http://yeziahehe.com/2017/11/07/PlusOne/</id>
    <published>2017-11-07T13:09:54.000Z</published>
    <updated>2019-03-31T08:35:01.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/PlusOne.png" alt></p><p><a href="https://leetcode.com/problems/plus-one/description/" target="_blank" rel="noopener">LeetCode 66. Plus One</a>，题目的意思给定一个非负数组表示一个数字，从高位向低位排，加一之后输出结果。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>先把数组反向然后遍历，如果是 <code>index == 0</code> 就加一，记录下进位值 <code>carry = sum / 10</code> 和加一后的当前数字 <code>reDigits[index] = sum % 10</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">plusOne</span><span class="params">(<span class="number">_</span> digits: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> reDigits: [<span class="type">Int</span>] = digits.reversed()</span><br><span class="line">        <span class="keyword">var</span> carry = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (index, digit) <span class="keyword">in</span> reDigits.enumerated() &#123;</span><br><span class="line">            <span class="keyword">let</span> sum = index == <span class="number">0</span> ? digit + <span class="number">1</span> + carry : digit + carry</span><br><span class="line">            carry = sum / <span class="number">10</span></span><br><span class="line">            reDigits[index] = sum % <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> carry &gt; <span class="number">0</span> &#123;</span><br><span class="line">            reDigits.append(carry)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> reDigits.reversed()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/11/07/PlusOne/">http://yeziahehe.com/2017/11/07/PlusOne/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-1258094708.cos.ap-shanghai.myqcloud.com
      
    
    </summary>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yeziahehe.com/tags/Math/"/>
    
      <category term="Array" scheme="http://yeziahehe.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Reverse Linked List</title>
    <link href="http://yeziahehe.com/2017/11/06/ReverseLinkedList/"/>
    <id>http://yeziahehe.com/2017/11/06/ReverseLinkedList/</id>
    <published>2017-11-06T11:57:00.000Z</published>
    <updated>2019-03-31T08:35:54.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/ReverseLinkedList.png" alt></p><p><a href="https://leetcode.com/problems/reverse-linked-list/description/#" target="_blank" rel="noopener">LeetCode 206. Reverse Linked List</a>，反转链表，迭代法和递归法同时实现。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h2><p>迭代的精髓在于按顺序对指针指向的扭转。以1-&gt;2-&gt;3-&gt;4为例，当迭代到第三次时，前面的运算已经保存了一个pre值，值为2-&gt;1，这时到3这个节点，只需把它的指向指到pre即可，而构成的新的链表3-&gt;2-&gt;1保存为pre以供下次迭代，但是因为它后面的值还要做运算，所以把它原先的指向先保存起来（为next），为了下次继续迭代。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">nil</span> || head?.next == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> headNode = head</span><br><span class="line">        <span class="keyword">var</span> pre: <span class="type">ListNode?</span> = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">while</span> (headNode != <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> tmp = headNode?.next</span><br><span class="line">            headNode?.next = pre</span><br><span class="line">            pre = headNode</span><br><span class="line">            headNode = tmp</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><p>递归的精髓在于将next当做参数传入reverseList函数时，在下一次递归中对参数的操作，会反应在上次的参数值上。<br>还是以1-&gt;2-&gt;3-&gt;4举例子，4次递归后（回溯前），其实是将引用链全部打破：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(<span class="number">_</span> head: ListNode?)</span></span> -&gt; <span class="type">ListNode?</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">nil</span> || head?.next == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> next = head?.next</span><br><span class="line">        head?.next = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">let</span> newHead = reverseList(next)</span><br><span class="line">        next?.next = head</span><br><span class="line">        <span class="keyword">return</span> newHead</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/11/06/ReverseLinkedList/">http://yeziahehe.com/2017/11/06/ReverseLinkedList/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-1258094708.cos.ap-shanghai.myqcloud.com
      
    
    </summary>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yeziahehe.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>Find K Pairs with Smallest Sums</title>
    <link href="http://yeziahehe.com/2017/11/05/FindKPairsWithSmallestSums/"/>
    <id>http://yeziahehe.com/2017/11/05/FindKPairsWithSmallestSums/</id>
    <published>2017-11-05T13:03:51.000Z</published>
    <updated>2019-03-31T08:45:43.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/FindKPairsWithSmallestSums.png" alt></p><p><a href="https://leetcode.com/problems/find-k-pairs-with-smallest-sums/description/" target="_blank" rel="noopener">LeetCode 373. Find K Pairs with Smallest Sums</a>，题目的意思给定两个升序排序整数数组，从两个数组中各取一个数字组合成 (u,v)，输出前 k 个最小的组合。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>我原本想定义一套判断规则，但是发现要处理很多下标情况。后来看了 Discuss 之后，最好的方式是定义 Heap（堆数据结构），但是 Swift 中不包含这样的数据结构。退而求其次，用了一个方法，记录 nums1 中每个元素已经配对到 nums2 中的第几个，每次遍历 nums1 中的元素，求出 <code>nums1[i]+nums2[index[i]]</code>，取出最小值放入输出数组中即可。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">kSmallestPairs</span><span class="params">(<span class="number">_</span> nums1: [Int], <span class="number">_</span> nums2: [Int], <span class="number">_</span> k: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">if</span> k &lt;= <span class="number">0</span> || nums1.isEmpty || nums2.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> cnt = <span class="built_in">min</span>(k, nums1.<span class="built_in">count</span> * nums2.<span class="built_in">count</span>)</span><br><span class="line">        <span class="keyword">var</span> index = <span class="type">Array</span>(repeatElement(<span class="number">0</span>, <span class="built_in">count</span>: nums1.<span class="built_in">count</span>))</span><br><span class="line">        <span class="keyword">var</span> pairs: [[<span class="type">Int</span>]] = []</span><br><span class="line">        <span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> n &lt; cnt &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="built_in">min</span> = <span class="type">Int</span>.<span class="built_in">max</span></span><br><span class="line">            <span class="keyword">var</span> m = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums1.<span class="built_in">count</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> index[i] &lt; nums2.<span class="built_in">count</span> &amp;&amp; nums1[i]+nums2[index[i]] &lt; <span class="built_in">min</span> &#123;</span><br><span class="line">                    <span class="built_in">min</span> = nums1[i]+nums2[index[i]]</span><br><span class="line">                    m = i</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pairs.append([nums1[m], nums2[index[m]]])</span><br><span class="line">            index[m] += <span class="number">1</span></span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pairs</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/11/05/FindKPairsWithSmallestSums/">http://yeziahehe.com/2017/11/05/FindKPairsWithSmallestSums/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-1258094708.cos.ap-shanghai.myqcloud.com
      
    
    </summary>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Heap" scheme="http://yeziahehe.com/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>Maximum Product of Three Numbers</title>
    <link href="http://yeziahehe.com/2017/11/03/MaximumProductOfThreeNumbers/"/>
    <id>http://yeziahehe.com/2017/11/03/MaximumProductOfThreeNumbers/</id>
    <published>2017-11-03T08:56:28.000Z</published>
    <updated>2019-03-31T08:44:19.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/MaximumProductOfThreeNumber.png" alt></p><p><a href="https://leetcode.com/problems/maximum-product-of-three-numbers/description/" target="_blank" rel="noopener">LeetCode 628. Maximum Product of Three Numbers</a>，题目的意思是在一个给定范围的整数数组里面寻找三个数积最大值。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>思路上面很清晰，三个最大数或者两个最小数和最大数，比较这两个值中较大的一个，则为最大值。</p><h2 id="第一种（没通过）"><a href="#第一种（没通过）" class="headerlink" title="第一种（没通过）"></a>第一种（没通过）</h2><p>先使用系统的排序函数排序，时间复杂度上没通过。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maximumProduct</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> sortNums = nums.sorted()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(sortNums[<span class="number">0</span>] * sortNums[<span class="number">1</span>] * sortNums[nums.<span class="built_in">count</span> - <span class="number">1</span>], sortNums[nums.<span class="built_in">count</span> - <span class="number">3</span>] * sortNums[nums.<span class="built_in">count</span> - <span class="number">2</span>] * sortNums[nums.<span class="built_in">count</span> - <span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Complexity Analysis</p><ul><li>Time complexity : O(nlog(n)). Sorting the numsnums array takes nlog(n) time.</li><li>Space complexity : O(log(n)). Sorting takes O(logn) space.</li></ul><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/MaximumProductOfThreeNumbers_error.png" alt></p><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p>遍历数组，记录上述所需要的 5 个值，然后进行比较。时间复杂度为数组长度 O(n)。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maximumProduct</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> min1 = <span class="type">Int</span>.<span class="built_in">max</span></span><br><span class="line">        <span class="keyword">var</span> min2 = <span class="type">Int</span>.<span class="built_in">max</span></span><br><span class="line">        <span class="keyword">var</span> max1 = <span class="type">Int</span>.<span class="built_in">min</span></span><br><span class="line">        <span class="keyword">var</span> max2 = <span class="type">Int</span>.<span class="built_in">min</span></span><br><span class="line">        <span class="keyword">var</span> max3 = <span class="type">Int</span>.<span class="built_in">min</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> num &lt;= min1 &#123;</span><br><span class="line">                min2 = min1</span><br><span class="line">                min1 = num</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt;= min2 &#123;</span><br><span class="line">                min2 = num</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> num &gt;= max1 &#123;</span><br><span class="line">                max3 = max2</span><br><span class="line">                max2 = max1</span><br><span class="line">                max1 = num</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &gt;= max2 &#123;</span><br><span class="line">                max3 = max2</span><br><span class="line">                max2 = num</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &gt;= max3 &#123;</span><br><span class="line">                max3 = num</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(min1 * min2 * max1, max1 * max2 * max3)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Complexity Analysis</p><ul><li>Time complexity : O(n). Only one iteration over the numsnums array of length nn is required.</li><li>Space complexity : O(1). Constant extra space is used.</li></ul><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/11/03/MaximumProductOfThreeNumbers/">http://yeziahehe.com/2017/11/03/MaximumProductOfThreeNumbers/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-1258094708.cos.ap-shanghai.myqcloud.com
      
    
    </summary>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yeziahehe.com/tags/Math/"/>
    
      <category term="Array" scheme="http://yeziahehe.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Convert Sorted Array to Binary Search Tree</title>
    <link href="http://yeziahehe.com/2017/11/02/ConvertSortedArrayToBinarySearchTree/"/>
    <id>http://yeziahehe.com/2017/11/02/ConvertSortedArrayToBinarySearchTree/</id>
    <published>2017-11-02T11:52:05.000Z</published>
    <updated>2019-03-31T08:46:49.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/ConvertSortedArraytoBinarySearchTree.png" alt></p><p><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/description/" target="_blank" rel="noopener">LeetCode 108. Convert Sorted Array to Binary Search Tree</a>，题目的意思将一个升序的数组转化为平衡二叉查找树。</p><h2 id="balanced-BST"><a href="#balanced-BST" class="headerlink" title="balanced BST"></a>balanced BST</h2><p>二叉查找树（BST）是一种能够将链表插入的灵活性和有序数组查找的高效性结合起来的符号表实现。具体的说，就是使用每个节点含有两个链接（链表中每个节点只含有一个链接）的二叉查找树来高效地实现符号表。我们定义的数据结构由 <strong>结点</strong> 组成，结点包含的链接可以为空或者指向其他结点。在二叉树中，每个节点只能有一个父节点（只有一个例外，也就是根节点，它没有父节点），而且每个节点都只有左右两个链接，分别指向自己的左子节点和右子节点。二叉查找树的数据结构如下所示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> val: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">left</span>: <span class="type">TreeNode?</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">right</span>: <span class="type">TreeNode?</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> val: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.val = val</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">left</span> = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">right</span> = <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道，对于一般的二叉搜索树，其期望高度（即为一棵平衡树时）为lgn，其各操作的时间复杂度 O(lgn) 同时也由此而决定，这样就和二分查找时间复杂度一致。但是，在某些极端的情况下（如在插入的序列是有序的时），二叉搜索树将退化成近似链或链，此时，其操作的时间复杂度将退化成线性的，即O(n)。我们在平时构造二叉搜索树的时候，会通过随机化建立二叉搜索树，来避免这种情况，但是这种距离平衡二叉搜索树的时间复杂度还是有一定的差距。平衡二叉搜索树（Balanced Binary Tree）具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。不幸的是，在动态插入中保证树的完美平衡的代价太高了，相应的就有红黑二叉数等算法改进，这里不做过多介绍。</p><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><p>因为是有序的数组，所以可以直接通过二分的方法来不断的进行递归插入。联想到二分方法的原因是，因为二分法的时间复杂度为 O(lgn)，而平衡二叉查找树的时间复杂度也为 O(lgn)。所以算法如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sortedArrayToBST</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> nums.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sortSubArrayToBST(nums, <span class="number">0</span>, nums.<span class="built_in">count</span> - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">sortSubArrayToBST</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> strat: Int, <span class="number">_</span> end: Int)</span></span> -&gt; <span class="type">TreeNode?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> strat &lt;= end <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> mid = (strat + end) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">let</span> node = <span class="type">TreeNode</span>(nums[mid])</span><br><span class="line">        node.<span class="keyword">left</span> = sortSubArrayToBST(nums, strat, mid - <span class="number">1</span>)</span><br><span class="line">        node.<span class="keyword">right</span> = sortSubArrayToBST(nums, mid + <span class="number">1</span>, end)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/11/02/ConvertSortedArrayToBinarySearchTree/">http://yeziahehe.com/2017/11/02/ConvertSortedArrayToBinarySearchTree/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-1258094708.cos.ap-shanghai.myqcloud.com
      
    
    </summary>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yeziahehe.com/tags/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://yeziahehe.com/tags/Depth-first-Search/"/>
    
  </entry>
  
  <entry>
    <title>Maximum Gap</title>
    <link href="http://yeziahehe.com/2017/10/16/MaximumGap/"/>
    <id>http://yeziahehe.com/2017/10/16/MaximumGap/</id>
    <published>2017-10-16T11:52:05.000Z</published>
    <updated>2019-03-31T08:43:59.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="https://blog-1258094708.cos.ap-shanghai.myqcloud.com/MaximumGap.png" alt></p><p><a href="https://leetcode.com/problems/maximum-gap/description/" target="_blank" rel="noopener">LeetCode 164. Maximum Gap</a>，题目的意思给定一个未排序的数组，找到在排序情况下相邻两个数最大差值。要在线性时间和空间内解决，&lt; 2 个元素返回 0。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>首先想到的是利用系统的 sort() 进行排序，但是明显超时。最大的差值肯定大于 <code>(maxValue - minValue) / (nums.count - 1)</code>，很容易想到桶排序（当然我没想到，看了 Discuss 之后才想到）。那么令桶空间为 <code>(maxValue - minValue) / (nums.count - 1)</code>。排序完成后，只需要依次将相邻桶空间，后空间最小值减去前空间的最大值，然后寻找其中的最大值。</p><p>PS：</p><ol><li>桶空间 <code>max(1, (maxValue - minValue) / (nums.count - 1))</code>，处理最大值和最小相等、差值比个数小太多的情况。</li><li>桶个数 <code>(maxValue - minValue) / bucketCount + 1</code>，极限值[1, 10000000]。</li><li><code>preBucketMax</code> 记录前空间的最大值，因为有可能后一个桶空间为空。</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Bucket</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">var</span> empty: <span class="type">Bool</span> = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">var</span> maxValue: <span class="type">Int</span> = <span class="type">Int</span>.<span class="built_in">min</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">var</span> minValue: <span class="type">Int</span> = <span class="type">Int</span>.<span class="built_in">max</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maximumGap</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums.isEmpty || nums.<span class="built_in">count</span> &lt; <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> maxValue = nums.<span class="built_in">max</span>()!, minValue = nums.<span class="built_in">min</span>()!</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> bucketCount = <span class="built_in">max</span>(<span class="number">1</span>, (maxValue - minValue) / (nums.<span class="built_in">count</span> - <span class="number">1</span>))<span class="comment">//处理最大值和最小相等、差值比个数小太多的情况</span></span><br><span class="line">        <span class="keyword">let</span> bucketNum = (maxValue - minValue) / bucketCount + <span class="number">1</span><span class="comment">//极限值[1, 10000000]</span></span><br><span class="line">        <span class="keyword">var</span> buckets = <span class="type">Array</span>(repeatElement(<span class="type">Bucket</span>(), <span class="built_in">count</span>: bucketNum))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums &#123;</span><br><span class="line">            <span class="keyword">let</span> index = (num - minValue) / bucketCount</span><br><span class="line">            buckets[index].empty = <span class="literal">false</span></span><br><span class="line">            buckets[index].maxValue = <span class="built_in">max</span>(num, buckets[index].maxValue)</span><br><span class="line">            buckets[index].minValue = <span class="built_in">min</span>(num, buckets[index].minValue)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> preBucketMax = minValue, maxGap: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> bucket <span class="keyword">in</span> buckets &#123;</span><br><span class="line">            <span class="keyword">if</span> bucket.empty &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            maxGap = <span class="built_in">max</span>(bucket.minValue - preBucketMax, maxGap)</span><br><span class="line">            preBucketMax = bucket.maxValue</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maxGap</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/10/16/MaximumGap/">http://yeziahehe.com/2017/10/16/MaximumGap/</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目介绍&quot;&gt;&lt;a href=&quot;#题目介绍&quot; class=&quot;headerlink&quot; title=&quot;题目介绍&quot;&gt;&lt;/a&gt;题目介绍&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-1258094708.cos.ap-shanghai.myqcloud.com
      
    
    </summary>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Sort" scheme="http://yeziahehe.com/tags/Sort/"/>
    
  </entry>
  
</feed>
